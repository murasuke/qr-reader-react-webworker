{"version":3,"sources":["worker/worker.ts","webpack:///./src/worker/worker.ts?74f1","worker/index.ts","QRReader.tsx","App.tsx","index.tsx"],"names":["inst","wrap","Worker","module","exports","f","this","RelativeWrapperDiv","styled","div","props","width","height","VideoArea","video","OverlayDiv","top","left","QRScanerFrames","keyframes","QRScanerBar","state","QRReader","useState","overlay","setOverlay","useRef","timerId","worker","useMemo","useEffect","a","pause","current","clearInterval","constraints","audio","facingMode","navigator","mediaDevices","getUserMedia","stream","srcObject","play","canvas","OffscreenCanvas","context","getContext","setInterval","drawImage","imageData","getImageData","processData","then","qr","topLeft","bottomRight","console","log","data","showQRFrame","location","topLeftCorner","bottomRightCorner","y","x","gecognizeCallback","timerInterval","ref","defaultProps","App","React","stopOnRecognize","setStopOnRecognize","qrParam","setQRParam","code","setCode","className","e","type","name","value","onChange","target","checked","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ecd95a87.chunk.js","sourcesContent":["var wrap = require('comlink').wrap,Worker = require(\"!worker-loader?{}!/home/runner/work/qr-reader-react-webworker/qr-reader-react-webworker/node_modules/comlink-loader/dist/comlink-worker-loader.js!/home/runner/work/qr-reader-react-webworker/qr-reader-react-webworker/node_modules/babel-loader/lib/index.js??ref--5-oneOf-2!/home/runner/work/qr-reader-react-webworker/qr-reader-react-webworker/src/worker/worker.ts\"),inst;module.exports = function f() {if (this instanceof f) return wrap(Worker());return inst || (inst = wrap(Worker()));};","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"03b3857fa7c443b047da.worker.js\");\n};","/* ./worker/index.ts */\n\n// eslint-disable-next-line\nimport Worker from 'comlink-loader!./worker'; // inline loader\n\nexport default Worker;\n","import React, { useState, useEffect, useRef, useMemo } from 'react';\nimport styled, { keyframes} from 'styled-components';\nimport Worker from './worker';\nimport { QRCode } from 'jsqr';\nexport type { QRCode } from 'jsqr';\n\n\nexport type QRReaderProps = {\n  width?: number,\n  height?: number,\n  pause?: boolean,\n  showQRFrame?: boolean,\n  timerInterval?: number,\n  gecognizeCallback?: (e: QRCode) => void,\n}\n\ntype Point = {\n  x: number;\n  y: number;\n}\n\ntype OverlayPosition = {\n  top: number,\n  left: number,\n  width: number,\n  height: number,\n}\n\nconst RelativeWrapperDiv = styled.div<QRReaderProps>`\n  position: relative;\n  width : ${(props) => props.width}px;\n  height: ${(props) => props.height}px;\n`;\n\nconst VideoArea = styled.video`\n  position: absolute; \n  z-index : -100;\n`;\n\nconst OverlayDiv = styled.div<OverlayPosition>`\n  position: absolute; \n  border: 1px solid #F00;\n  top   : ${(props) => props.top}px;\n  left  : ${(props) => props.left}px;\n  width : ${(props) => props.width}px;\n  height: ${(props) => props.height}px;\n`;\n\nconst QRScanerFrames = keyframes`\n  from {\n    height: 0px;\n  }\n  to {\n    height: 100%;\n  }\n`;\n\nconst QRScanerBar = styled.div<{state: 'paused'|'running'}>`\n  animation: ${QRScanerFrames} infinite  2s alternate both ease-in-out ${(props) => props.state};\n  border-bottom: 3px solid #0F0;\n`;\n\nconst QRReader: React.FC<QRReaderProps> = (props) => {\n  const [overlay, setOverlay] = useState({ top:0, left: 0, width: 0, height: 0 });  \n  const video = useRef(null as HTMLVideoElement);\n  const timerId = useRef(null);\n  const worker = useMemo(() =>  new Worker(), [])\n\n  const drawRect = (topLeft: Point, bottomRight: Point) => {\n    setOverlay({\n      top: topLeft.y,\n      left: topLeft.x,\n      width: bottomRight.x - topLeft.x,\n      height: bottomRight.y - topLeft.y,\n    });\n  };\n\n  useEffect(() => {\n    (async() => {\n      if (props.pause) {\n        video.current.pause();\n        clearInterval(timerId.current);\n        timerId.current = null;\n        return;\n      }\n\n      const { width, height } = props;\n\n      const constraints = { \n        audio: false, \n        video: {\n          facingMode: 'environment', \n          width, \n          height, \n      }};\n    \n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n      video.current.srcObject = stream;\n      video.current.play();\n  \n      const canvas = new OffscreenCanvas(width, height);\n      const context = canvas.getContext('2d');\n\n      if (!timerId.current) {\n        timerId.current = setInterval(() => {\n          context.drawImage(video.current, 0, 0, width, height);\n          const imageData = context.getImageData(0, 0, width, height);\n          worker.processData(imageData).then(qr => {\n          if (qr) {\n            console.log(qr.data);\n            if (props.showQRFrame) {\n              drawRect(qr.location.topLeftCorner, qr.location.bottomRightCorner);\n            }\n            if (props.gecognizeCallback) props.gecognizeCallback(qr);               \n          }\n          });\n        }, props.timerInterval);\n      }\n      return () => clearInterval(timerId.current);\n    })();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props]);\n\n  return (    \n    <RelativeWrapperDiv {...props}>\n      <VideoArea ref={video}></VideoArea>\n      <OverlayDiv {...overlay}></OverlayDiv>\n      <QRScanerBar {...{state: (props.pause? 'paused': 'running')}}></QRScanerBar>\n    </RelativeWrapperDiv>    \n  );\n}\n\n// propsのデフォルト値を設定\nQRReader.defaultProps = {\n  width: 500,\n  height: 500,\n  pause: false,\n  showQRFrame: true,\n  timerInterval: 300,\n};\n\nexport default QRReader;","import React, { useState } from 'react';\nimport QRReader, { QRCode } from './QRReader';\n\nfunction App() {\n  const [stopOnRecognize, setStopOnRecognize] = React.useState(true);\n  const [qrParam, setQRParam] = useState({\n    width: 500,\n    height: 500,\n    pause: true,\n  });\n\n  const [code, setCode] = useState('');\n\n  const onRecognizeCode = (e: QRCode) => {\n    setCode(e.data);\n    if (stopOnRecognize) {\n      setQRParam( e => { return {...e, pause: true}; });\n    }\n  }\n\n  const toggleVideoStream = () => {\n    setQRParam( e => { return {...e, pause: !e.pause}; });\n  }\n\n  return (\n    <div className=\"App\">\n      <QRReader {...qrParam} gecognizeCallback={onRecognizeCode} />\n      <div>\n        <label>\n          <input type=\"radio\" name=\"rdo\" value=\"0\" onChange={(e) => setStopOnRecognize(e.target.value === \"0\")} checked={stopOnRecognize} />認識時に自動停止\n        </label>\n        <label>\n          <input type=\"radio\" name=\"rdo\" value=\"1\" onChange={(e) => setStopOnRecognize(e.target.value === \"0\")} checked={!stopOnRecognize} />認識時も処理継続\n        </label>\n        \n        <button onClick={toggleVideoStream}>{(qrParam.pause? '再開': '停止')}</button>\n        <p>QRコード：{code}</p>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}