{"version":3,"sources":["worker/worker.ts","webpack:///./src/worker/worker.ts?74f1","worker/index.ts","QRReader.tsx","App.tsx","index.tsx"],"names":["inst","wrap","Worker","module","exports","f","this","RelativeWrapperDiv","styled","div","props","width","height","VideoArea","video","OverlayDiv","top","left","QRScanArea","scanAreaRatio","QRScanerBar","ratio","keyframes","state","QRReader","useState","overlay","setOverlay","useRef","timerId","worker","useMemo","drawRect","topLeft","bottomRight","scanArea","y","x","Math","abs","useEffect","a","pause","current","clearInterval","constraints","audio","facingMode","navigator","mediaDevices","getUserMedia","stream","srcObject","setAttribute","play","canvas","OffscreenCanvas","context","getContext","tlRatio","setInterval","drawImage","imageData","getImageData","processData","then","qr","console","log","data","showQRFrame","location","topLeftCorner","bottomRightCorner","gecognizeCallback","timerInterval","ref","defaultProps","App","React","stopOnRecognize","setStopOnRecognize","qrParam","setQRParam","code","setCode","className","e","val","htmlFor","id","type","name","value","onChange","target","checked","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a06729cd.chunk.js","sourcesContent":["var wrap = require('comlink').wrap,Worker = require(\"!worker-loader?{}!C:/Users/t_nii/Documents/git/QRCode/qr-reader-react-webworker/node_modules/comlink-loader/dist/comlink-worker-loader.js!C:\\\\Users\\\\t_nii\\\\Documents\\\\git\\\\QRCode\\\\qr-reader-react-webworker\\\\node_modules\\\\babel-loader\\\\lib\\\\index.js??ref--5-oneOf-2!C:\\\\Users\\\\t_nii\\\\Documents\\\\git\\\\QRCode\\\\qr-reader-react-webworker\\\\src\\\\worker\\\\worker.ts\"),inst;module.exports = function f() {if (this instanceof f) return wrap(Worker());return inst || (inst = wrap(Worker()));};","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"f61a5d3cf1c50133bc32.worker.js\");\n};","/* ./worker/index.ts */\n\n// eslint-disable-next-line\nimport Worker from 'comlink-loader!./worker'; // inline loader\n\nexport default Worker;\n","/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-floating-promises */\n/* eslint-disable react/jsx-props-no-spreading */\nimport React, { useState, useEffect, useRef, useMemo } from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport { QRCode } from 'jsqr';\nimport Worker from './worker';\n\nexport type { QRCode } from 'jsqr';\nexport type QRReaderProps = {\n  width?: number;\n  height?: number;\n  pause?: boolean;\n  showQRFrame?: boolean;\n  timerInterval?: number;\n  scanAreaRatio?: number; // カメラ領域に対するスキャン領域の割合(0-100)\n  gecognizeCallback?: (e: QRCode) => void;\n};\n\ntype Point = {\n  x: number;\n  y: number;\n};\n\ntype OverlayPosition = {\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n};\n\n// 外枠。カメラ領域と、スキャン中を示すバーを重ねて表示するためrelative指定\nconst RelativeWrapperDiv = styled.div<QRReaderProps>`\n  position: relative;\n  width: ${(props) => props.width}px;\n  height: ${(props) => props.height}px;\n`;\n\n// カメラ表示領域\nconst VideoArea = styled.video`\n  position: absolute;\n  z-index: -100;\n`;\n\n// 認識したQRコードを囲う赤枠\nconst OverlayDiv = styled.div<OverlayPosition>`\n  position: absolute;\n  top: ${(props) => props.top}px;\n  left: ${(props) => props.left}px;\n  width: ${(props) => props.width}px;\n  height: ${(props) => props.height}px;\n  border: 1px solid #f00;\n`;\n\n// スキャン可能エリア表示\n//  ・borderを半透明(灰色)にして、中央部だけスキャンができることを目立たせる\nconst QRScanArea = styled.div<QRReaderProps>`\n  position: absolute;\n  box-sizing: border-box;\n  width: ${(props) => props.width}px;\n  height: ${(props) => props.height}px;\n  border-top: ${(props) => (props.height * ((100 - props.scanAreaRatio) / 2)) / 100}px solid rgb(0, 0, 0, 0.3);\n  border-right: ${(props) => (props.width * ((100 - props.scanAreaRatio) / 2)) / 100}px solid rgb(0, 0, 0, 0.3);\n  border-bottom: ${(props) => (props.height * ((100 - props.scanAreaRatio) / 2)) / 100}px solid rgb(0, 0, 0, 0.3);\n  border-left: ${(props) => (props.width * ((100 - props.scanAreaRatio) / 2)) / 100}px solid rgb(0, 0, 0, 0.3);\n`;\n\n// 緑色のバーを上下させるためのkeyframe(cssアニメーション)\n// keyframesに引数を渡すため、keyframeを返すアロー関数として定義する\nconst qrscanerframes = (ratio: number) => keyframes`\n  from {\n    height: ${(100 - ratio) / 2}%;\n  }\n\n  to {\n    height: ${ratio + (100 - ratio) / 2}%;\n  }\n`;\n\n// スキャン可能領域を上下する緑色のバー(スキャン中であることを明示する目的)\nconst QRScanerBar = styled.div<{ state: 'paused' | 'running' } & QRReaderProps>`\n  position: absolute;\n  left: ${(props) => (100 - props.scanAreaRatio) / 2}%;\n  width: ${(props) => props.scanAreaRatio}%;\n  border-bottom: 3px solid #0f0;\n  animation: ${(props) => qrscanerframes(props.scanAreaRatio)} infinite 1300ms alternate both ease-in-out ${(props) => props.state};\n`;\n\n// QRコード認識コンポーネント\nconst QRReader: React.FC<QRReaderProps> = (props) => {\n  const [overlay, setOverlay] = useState({\n    top: 0,\n    left: 0,\n    width: 0,\n    height: 0,\n  });\n  // DOMオブジェクト(video)を参照するためuseRef()を使用する\n  const video = useRef(null as HTMLVideoElement);\n  const timerId = useRef(null);\n  // QR認識処理をバックグラウンドで処理するためのWorker(レンダリング毎に生成するのを防ぐためメモ化)\n  const worker = useMemo(() => new Worker(), []);\n\n  // QR認識枠を表示する\n  const drawRect = (\n    topLeft: Point,\n    bottomRight: Point,\n    scanArea?: OverlayPosition,\n  ) => {\n    setOverlay({\n      top:\n        (topLeft.y < bottomRight.y ? topLeft.y : bottomRight.y) +\n          scanArea.top ?? 0,\n      left:\n        (topLeft.x < bottomRight.x ? topLeft.x : bottomRight.x) +\n          scanArea.left ?? 0,\n      width: Math.abs(bottomRight.x - topLeft.x),\n      height: Math.abs(bottomRight.y - topLeft.y),\n    });\n  };\n\n  useEffect(() => {\n    (async () => {\n      if (props.pause) {\n        video.current.pause();\n        clearInterval(timerId.current);\n        timerId.current = null;\n\n        return;\n      }\n\n      const { width, height } = props;\n\n      const constraints = {\n        audio: false,\n        video: {\n          facingMode: 'environment',\n          width,\n          height,\n        },\n      };\n\n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n      video.current.srcObject = stream;\n      video.current.setAttribute('autoplay', '');\n      video.current.setAttribute('muted', '');\n      video.current.setAttribute('playsinline', '');\n      video.current.play();\n\n      const canvas = new OffscreenCanvas(width, height);\n      const context = canvas.getContext('2d');\n\n      // QR認識領域を計算(幅*scanAreaRatioの領域をcenterに表示)\n      const tlRatio = (100 - props.scanAreaRatio) / 2 / 100;\n      const ratio = props.scanAreaRatio / 100;\n      const scanArea = {\n        top: height * tlRatio,\n        left: width * tlRatio,\n        width: width * ratio,\n        height: height * ratio,\n      };\n\n      if (!timerId.current) {\n        timerId.current = setInterval(() => {\n          // video領域から中央を切り抜いて画像化(位置は全体に対するscanAreaRatioの比率で計算)\n          context.drawImage(\n            video.current,\n            scanArea.left,\n            scanArea.top,\n            scanArea.width,\n            scanArea.height,\n            0,\n            0,\n            scanArea.width,\n            scanArea.height,\n          );\n          const imageData = context.getImageData(\n            0,\n            0,\n            scanArea.width,\n            scanArea.height,\n          );\n\n          // QRコード認識処理はWeb Workerに移譲(バックグラウンドスレッドで実行)\n          void worker.processData(imageData).then((qr) => {\n            if (qr) {\n              console.log(qr.data);\n              if (props.showQRFrame) {\n                drawRect(\n                  qr.location.topLeftCorner,\n                  qr.location.bottomRightCorner,\n                  scanArea,\n                );\n              }\n              // 認識後コールバック\n              if (props.gecognizeCallback) props.gecognizeCallback(qr);\n            }\n          });\n        }, props.timerInterval);\n      }\n\n      // eslint-disable-next-line consistent-return\n      return () => clearInterval(timerId.current);\n    })();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props]);\n\n  return (\n    <RelativeWrapperDiv {...props}>\n      <VideoArea ref={video} />\n      <OverlayDiv {...overlay} />\n      <QRScanArea {...props} />\n      <QRScanerBar\n        {...{ state: props.pause ? 'paused' : 'running', ...props }}\n      />\n    </RelativeWrapperDiv>\n  );\n};\n\n// propsのデフォルト値を設定\nQRReader.defaultProps = {\n  width: 500,\n  height: 500,\n  pause: false,\n  showQRFrame: true,\n  timerInterval: 300,\n  scanAreaRatio: 70,\n};\n\nexport default QRReader;\n","/* eslint-disable react/jsx-props-no-spreading */\nimport React, { VFC, useState } from 'react';\nimport QRReader, { QRCode } from './QRReader';\n\nconst App: VFC = () => {\n  const [stopOnRecognize, setStopOnRecognize] = React.useState(true);\n  const [qrParam, setQRParam] = useState({\n    width: 500,\n    height: 500,\n    pause: true,\n  });\n\n  const [code, setCode] = useState('');\n\n  const onRecognizeCode = (e: QRCode) => {\n    setCode(e.data);\n    if (stopOnRecognize) {\n      setQRParam((val) => ({ ...val, pause: true }));\n    }\n  };\n\n  const toggleVideoStream = () => {\n    setQRParam((val) => ({ ...val, pause: !val.pause }));\n  };\n\n  return (\n    <div className=\"App\">\n      <QRReader {...qrParam} gecognizeCallback={onRecognizeCode} />\n      <div>\n        <label htmlFor=\"rdoStop\">\n          <input\n            id=\"rdoStop\"\n            type=\"radio\"\n            name=\"rdo\"\n            value=\"0\"\n            onChange={(e) => setStopOnRecognize(e.target.value === '0')}\n            checked={stopOnRecognize}\n          />\n          認識時に自動停止\n        </label>\n        <label htmlFor=\"rdoContinue\">\n          <input\n            id=\"rdoContinue\"\n            type=\"radio\"\n            name=\"rdo\"\n            value=\"1\"\n            onChange={(e) => setStopOnRecognize(e.target.value === '0')}\n            checked={!stopOnRecognize}\n          />\n          認識時も処理継続\n        </label>\n\n        <button type=\"button\" onClick={toggleVideoStream}>\n          {qrParam.pause ? '再開' : '停止'}\n        </button>\n        <p>QRコード：{code}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}