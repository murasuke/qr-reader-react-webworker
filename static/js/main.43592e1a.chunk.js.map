{"version":3,"sources":["worker/worker.ts","webpack:///./src/worker/worker.ts?74f1","worker/index.ts","QRReader.tsx","App.tsx","index.tsx"],"names":["inst","wrap","Worker","module","exports","f","this","RelativeWrapperDiv","styled","div","props","width","height","VideoArea","video","OverlayDiv","top","left","QRScanArea","scanAreaRatio","QRScanerBar","ratio","keyframes","state","QRReader","useState","overlay","setOverlay","useRef","timerId","worker","useMemo","drawRect","topLeft","bottomRight","scanArea","y","x","Math","abs","useEffect","a","pause","current","clearInterval","constraints","audio","facingMode","navigator","mediaDevices","getUserMedia","stream","srcObject","play","canvas","OffscreenCanvas","context","getContext","tlRatio","setInterval","drawImage","imageData","getImageData","processData","then","qr","console","log","data","showQRFrame","location","topLeftCorner","bottomRightCorner","gecognizeCallback","timerInterval","ref","defaultProps","App","React","stopOnRecognize","setStopOnRecognize","qrParam","setQRParam","code","setCode","className","e","type","name","value","onChange","target","checked","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.43592e1a.chunk.js","sourcesContent":["var wrap = require('comlink').wrap,Worker = require(\"!worker-loader?{}!/home/runner/work/qr-reader-react-webworker/qr-reader-react-webworker/node_modules/comlink-loader/dist/comlink-worker-loader.js!/home/runner/work/qr-reader-react-webworker/qr-reader-react-webworker/node_modules/babel-loader/lib/index.js??ref--5-oneOf-2!/home/runner/work/qr-reader-react-webworker/qr-reader-react-webworker/src/worker/worker.ts\"),inst;module.exports = function f() {if (this instanceof f) return wrap(Worker());return inst || (inst = wrap(Worker()));};","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"07a4d927844014e176ef.worker.js\");\n};","/* ./worker/index.ts */\n\n// eslint-disable-next-line\nimport Worker from 'comlink-loader!./worker'; // inline loader\n\nexport default Worker;\n","import React, { useState, useEffect, useRef, useMemo } from 'react';\nimport styled, { keyframes} from 'styled-components';\nimport Worker from './worker';\nimport { QRCode } from 'jsqr';\nexport type { QRCode } from 'jsqr';\n\n\nexport type QRReaderProps = {\n  width?: number,\n  height?: number,\n  pause?: boolean,\n  showQRFrame?: boolean,\n  timerInterval?: number,\n  scanAreaRatio?: number, // カメラ領域に対するスキャン領域の割合(0-100) \n  gecognizeCallback?: (e: QRCode) => void,\n}\n\ntype Point = {\n  x: number;\n  y: number;\n}\n\ntype OverlayPosition = {\n  top: number,\n  left: number,\n  width: number,\n  height: number,\n}\n\n// 外枠。カメラ領域と、スキャン中を示すバーを重ねて表示するためrelative指定\nconst RelativeWrapperDiv = styled.div<QRReaderProps>`\n  position: relative;\n  width : ${(props) => props.width}px;\n  height: ${(props) => props.height}px;\n`;\n\n// カメラ表示領域\nconst VideoArea = styled.video`\n  position: absolute; \n  z-index : -100;\n`;\n\n// 認識したQRコードを囲う赤枠\nconst OverlayDiv = styled.div<OverlayPosition>`\n  position: absolute; \n  border: 1px solid #F00;\n  top   : ${(props) => props.top}px;\n  left  : ${(props) => props.left}px;\n  width : ${(props) => props.width}px;\n  height: ${(props) => props.height}px;\n`;\n\n// スキャン可能エリア表示\n//  ・borderを半透明(灰色)にして、中央部だけスキャンができることを目立たせる\nconst QRScanArea = styled.div<QRReaderProps>`\n  position: absolute;\n  box-sizing: border-box;\n  height:  ${(props) => props.height}px;\n  width :  ${(props) => props.width}px;\n  border-left:   ${(props) => props.width  * ((100 - props.scanAreaRatio) / 2) / 100 }px solid rgb(0,0,0,0.3);\n  border-right:  ${(props) => props.width  * ((100 - props.scanAreaRatio) / 2) / 100 }px solid rgb(0,0,0,0.3);\n  border-top:    ${(props) => props.height * ((100 - props.scanAreaRatio) / 2) / 100 }px solid rgb(0,0,0,0.3);\n  border-bottom: ${(props) => props.height * ((100 - props.scanAreaRatio) / 2) / 100 }px solid rgb(0,0,0,0.3);\n`;\n\n\n// 緑色のバーを上下させるためのkeyframe(cssアニメーション)\n// keyframesに引数を渡すため、keyframeを返すアロー関数として定義する\nconst QRScanerFrames = (ratio: number) => keyframes`\n  from {\n    height: ${(100 - ratio) / 2}%;\n  }\n  to {\n    height: ${ratio + (100 - ratio) / 2}%;\n  }\n`;\n\n// スキャン可能領域を上下する緑色のバー(スキャン中であることを明示する目的)\nconst QRScanerBar = styled.div<{state: 'paused'|'running'} & QRReaderProps>`\n  position: absolute;\n  animation: ${(props) => QRScanerFrames(props.scanAreaRatio)} infinite  1300ms alternate both ease-in-out ${(props) => props.state};\n  border-bottom: 3px solid #0F0;\n  left: ${(props) => (100 - props.scanAreaRatio) / 2}%;\n  width : ${(props) => props.scanAreaRatio}%;\n`;\n\n// QRコード認識コンポーネント\nconst QRReader: React.FC<QRReaderProps> = (props) => {\n  const [overlay, setOverlay] = useState({ top:0, left: 0, width: 0, height: 0 }); \n  // DOMオブジェクト(video)を参照するためuseRef()を使用する\n  const video = useRef(null as HTMLVideoElement);\n  const timerId = useRef(null);\n  // QR認識処理をバックグラウンドで処理するためのWorker(レンダリング毎に生成するのを防ぐためメモ化)\n  const worker = useMemo(() =>  new Worker(), [])\n\n  // QR認識枠を表示する\n  const drawRect = (topLeft: Point, bottomRight: Point, scanArea?: OverlayPosition) => {\n    setOverlay({\n      top:  (topLeft.y < bottomRight.y ? topLeft.y : bottomRight.y) + scanArea.top ?? 0,\n      left: (topLeft.x < bottomRight.x ? topLeft.x :bottomRight.x) + scanArea.left ?? 0,\n      width: Math.abs(bottomRight.x - topLeft.x),\n      height: Math.abs(bottomRight.y - topLeft.y),\n    });\n  };\n\n  useEffect(() => {\n    (async() => {\n      if (props.pause) {\n        video.current.pause();\n        clearInterval(timerId.current);\n        timerId.current = null;\n        return;\n      }\n\n      const { width, height } = props;\n\n      const constraints = { \n        audio: false, \n        video: {\n          facingMode: 'environment', \n          width, \n          height, \n      }};\n    \n      const stream = await navigator.mediaDevices.getUserMedia(constraints);\n      video.current.srcObject = stream;\n      video.current.play();\n  \n      const canvas = new OffscreenCanvas(width, height);\n      const context = canvas.getContext('2d');\n\n      // QR認識領域を計算(幅*scanAreaRatioの領域をcenterに表示)\n      const tlRatio = (100 - props.scanAreaRatio) / 2 / 100;\n      const ratio = props.scanAreaRatio / 100;\n      const scanArea = { top:　height * tlRatio, left: width * tlRatio, width: width * ratio, height: height * ratio};\n\n      if (!timerId.current) {\n        timerId.current = setInterval(() => {\n          // video領域から中央を切り抜いて画像化(位置は全体に対するscanAreaRatioの比率で計算)\n          context.drawImage(video.current, scanArea.left, scanArea.top, scanArea.width, scanArea.height, 0, 0, scanArea.width, scanArea.height);\n          const imageData = context.getImageData(0, 0, scanArea.width, scanArea.height);\n\n          // QRコード認識処理はWeb Workerに移譲(バックグラウンドスレッドで実行)\n          worker.processData(imageData).then(qr => {\n          if (qr) {\n            console.log(qr.data);\n            if (props.showQRFrame) {\n              drawRect(qr.location.topLeftCorner, qr.location.bottomRightCorner, scanArea);\n            }\n            // 認識後コールバック\n            if (props.gecognizeCallback) props.gecognizeCallback(qr);               \n          }\n          });\n        }, props.timerInterval);\n      }\n      return () => clearInterval(timerId.current);\n    })();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props]);\n\n  return (\n    <RelativeWrapperDiv {...props}>\n      <VideoArea ref={video} />\n      <OverlayDiv  {...overlay} />\n      <QRScanArea  {...props} />\n      <QRScanerBar {...{state: (props.pause? 'paused': 'running'), ...props}} />\n    </RelativeWrapperDiv> \n  );\n}\n\n// propsのデフォルト値を設定\nQRReader.defaultProps = {\n  width: 500,\n  height: 500,\n  pause: false,\n  showQRFrame: true,\n  timerInterval: 300,\n  scanAreaRatio: 70,\n};\n\nexport default QRReader;\n","import React, { useState } from 'react';\nimport QRReader, { QRCode } from './QRReader';\n\nfunction App() {\n  const [stopOnRecognize, setStopOnRecognize] = React.useState(true);\n  const [qrParam, setQRParam] = useState({\n    width: 500,\n    height: 500,\n    pause: true,\n  });\n\n  const [code, setCode] = useState('');\n\n  const onRecognizeCode = (e: QRCode) => {\n    setCode(e.data);\n    if (stopOnRecognize) {\n      setQRParam( e => { return {...e, pause: true}; });\n    }\n  }\n\n  const toggleVideoStream = () => {\n    setQRParam( e => { return {...e, pause: !e.pause}; });\n  }\n\n  return (\n    <div className=\"App\">\n      <QRReader {...qrParam} gecognizeCallback={onRecognizeCode} />\n      <div>\n        <label>\n          <input type=\"radio\" name=\"rdo\" value=\"0\" onChange={(e) => setStopOnRecognize(e.target.value === \"0\")} checked={stopOnRecognize} />認識時に自動停止\n        </label>\n        <label>\n          <input type=\"radio\" name=\"rdo\" value=\"1\" onChange={(e) => setStopOnRecognize(e.target.value === \"0\")} checked={!stopOnRecognize} />認識時も処理継続\n        </label>\n        \n        <button onClick={toggleVideoStream}>{(qrParam.pause? '再開': '停止')}</button>\n        <p>QRコード：{code}</p>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}